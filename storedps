USE GYMASTER
GO

CREATE PROCEDURE SP_AUTHENTICATE_ADMIN
    @USERNAME VARCHAR(20),
    @PASSWORD VARCHAR(15)
AS
BEGIN
    BEGIN TRY
        SELECT USER_ID, USERNAME, IS_ACTIVE 
        FROM [USER]
        WHERE USERNAME = @USERNAME 
          AND [PASSWORD] = @PASSWORD 
          AND USER_TYPE = 'Admin'
          AND IS_ACTIVE = 1;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END;

CREATE PROCEDURE SP_AUTHENTICATE_STAFF
    @USERNAME VARCHAR(20),
    @PASSWORD VARCHAR(15)
AS
BEGIN
    BEGIN TRY
        SELECT USER_ID, USERNAME, IS_ACTIVE 
        FROM [USER]
        WHERE USERNAME = @USERNAME 
          AND [PASSWORD] = @PASSWORD 
          AND USER_TYPE = 'Staff'
          AND IS_ACTIVE = 1;
    END TRY
    BEGIN CATCH
        SELECT ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END;

CREATE PROCEDURE SP_CHANGE_USER_PASSWORD
    @USER_ID SMALLINT,
    @NEW_PASSWORD VARCHAR(15)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        UPDATE [USER]
        SET [PASSWORD] = @NEW_PASSWORD
        WHERE USER_ID = @USER_ID AND IS_ACTIVE = 1;

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('No active user found with the given ID.', 16, 1);
            RETURN;
        END

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

----------------------------------------------------------------

CREATE PROCEDURE SP_INSERTUSER
    @USERFNAME VARCHAR(50),
    @USERLNAME VARCHAR(30),
    @USERNAME VARCHAR(20),
    @PASSWORD VARCHAR(15),
    @USERTYPE VARCHAR(10)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF EXISTS (SELECT 1 FROM [USER] WHERE USERNAME = @USERNAME)
        BEGIN
            RAISERROR('USERNAME ALREADY EXISTS.', 16, 1);
            RETURN;
        END

        INSERT INTO [USER] (USER_FNAME, USER_LNAME, USERNAME, [PASSWORD], USER_TYPE)
        VALUES (@USERFNAME, @USERLNAME, @USERNAME, @PASSWORD, @USERTYPE);

        SELECT SCOPE_IDENTITY() AS NEWUSERID;
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_UPDATEUSER
    @USERID SMALLINT,
    @USERFNAME VARCHAR(50) = NULL,
    @USERLNAME VARCHAR(30) = NULL,
    @USERNAME VARCHAR(20) = NULL,
    @USERTYPE VARCHAR(10) = NULL,
    @ISACTIVE BIT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM [USER] WHERE USER_ID = @USERID)
        BEGIN
            RAISERROR('USER DOES NOT EXIST.', 16, 1);
            RETURN;
        END

        IF @USERNAME IS NOT NULL AND EXISTS (
            SELECT 1 FROM [USER] 
            WHERE USERNAME = @USERNAME AND USER_ID != @USERID
        )
        BEGIN
            RAISERROR('USERNAME IS ALREADY IN USE BY ANOTHER USER.', 16, 1);
            RETURN;
        END

        UPDATE [USER]
        SET 
            USER_FNAME = COALESCE(@USERFNAME, USER_FNAME),
            USER_LNAME = COALESCE(@USERLNAME, USER_LNAME),
            USERNAME = COALESCE(@USERNAME, USERNAME),
            USER_TYPE = COALESCE(@USERTYPE, USER_TYPE),
            IS_ACTIVE = COALESCE(@ISACTIVE, IS_ACTIVE)
        WHERE USER_ID = @USERID;

        PRINT 'USER UPDATED SUCCESSFULLY.';
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_DISPLAYUSERS
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            USER_FNAME,
            USER_LNAME,
            USERNAME,
            USER_TYPE,
            IS_ACTIVE
        FROM [USER]
        ORDER BY USER_FNAME, USER_LNAME;
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

------------------------------------------------------------------------

CREATE PROCEDURE SP_INSERTCOACH
    @COACHFNAME VARCHAR(50),
    @COACHLNAME VARCHAR(30),
    @EMAIL VARCHAR(50),
    @PHONENUMBER VARCHAR(15),
    @PROGRAM_NAME VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF EXISTS (SELECT 1 FROM COACH WHERE EMAIL = @EMAIL)
        BEGIN
            RAISERROR('EMAIL ALREADY EXISTS.', 16, 1);
            RETURN;
        END

        DECLARE @PROGRAM_ID SMALLINT;

        SELECT TOP 1 @PROGRAM_ID = PROGRAM_ID
        FROM PROGRAM
        WHERE PROGRAM_NAME = @PROGRAM_NAME;

        IF @PROGRAM_ID IS NULL
        BEGIN
            RAISERROR('PROGRAM NAME DOES NOT EXIST.', 16, 1);
            RETURN;
        END

        INSERT INTO COACH (COACH_FNAME, COACH_LNAME, EMAIL, PHONE_NUMBER, SPECIALIZATION)
        VALUES (@COACHFNAME, @COACHLNAME, @EMAIL, @PHONENUMBER, @PROGRAM_NAME);

        INSERT INTO PROGRAM_COACH (PROGRAM_ID, COACH_ID)
        VALUES (@PROGRAM_ID, SCOPE_IDENTITY());

        SELECT SCOPE_IDENTITY() AS NEWCOACHID;
    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_UPDATECOACH
    @COACH_ID SMALLINT,
    @COACHFNAME VARCHAR(50),
    @COACHLNAME VARCHAR(30),
    @EMAIL VARCHAR(50),
    @PHONENUMBER VARCHAR(15),
    @PROGRAM_NAME VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @PROGRAM_ID SMALLINT;

        SELECT TOP 1 @PROGRAM_ID = PROGRAM_ID
        FROM PROGRAM
        WHERE PROGRAM_NAME = @PROGRAM_NAME;

        IF @PROGRAM_ID IS NULL
        BEGIN
            RAISERROR('PROGRAM NAME DOES NOT EXIST.', 16, 1);
            RETURN;
        END

        UPDATE COACH
        SET COACH_FNAME = COALESCE(@COACHFNAME, COACH_FNAME),
            COACH_LNAME = COALESCE(@COACHLNAME, COACH_LNAME),
            EMAIL = COALESCE(@EMAIL, EMAIL),
            PHONE_NUMBER = COALESCE(@PHONENUMBER, PHONE_NUMBER),
            SPECIALIZATION = @PROGRAM_NAME
        WHERE COACH_ID = @COACH_ID;

        UPDATE PROGRAM_COACH
        SET PROGRAM_ID = @PROGRAM_ID
        WHERE COACH_ID = @COACH_ID;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GETCOACHES
AS
BEGIN
    SELECT 
        COACH_FNAME, 
        COACH_LNAME,  
        EMAIL, 
        PHONE_NUMBER, 
        SPECIALIZATION, 
        IS_ACTIVE
    FROM 
        COACH;
END;

----------------------------------------------------------------------

CREATE PROCEDURE SP_INSERTPROGRAM
    @PROGRAM_NAME VARCHAR(50)
AS
BEGIN
    INSERT INTO PROGRAM (PROGRAM_NAME)
    VALUES (@PROGRAM_NAME);
END;

CREATE PROCEDURE SP_UPDATEPROGRAM
    @PROGRAM_ID SMALLINT,
    @PROGRAM_NAME VARCHAR(50),
    @IS_ACTIVE BIT
AS
BEGIN
    UPDATE PROGRAM
    SET PROGRAM_NAME = COALESCE(@PROGRAM_NAME, PROGRAM_NAME),
        IS_ACTIVE = COALESCE(@IS_ACTIVE, IS_ACTIVE)
    WHERE PROGRAM_ID = @PROGRAM_ID;
END;

CREATE PROCEDURE SP_GET_PROGRAMS
AS
BEGIN
    SELECT 
        PROGRAM_NAME, 
        IS_ACTIVE
    FROM 
        PROGRAM;
END;

---------------------------------------------------------------

CREATE PROCEDURE SP_INSERTSUBSCRIPTION
    @SUB_NAME VARCHAR(20),
    @DURATION VARCHAR(10),
    @PRICE MONEY
AS
BEGIN
    INSERT INTO SUBSCRIPTION (SUB_NAME, DURATION, PRICE)
    VALUES (@SUB_NAME, @DURATION, @PRICE);
END;

CREATE PROCEDURE SP_UPDATESUBSCRIPTION
    @SUB_ID SMALLINT,
    @SUB_NAME VARCHAR(20),
    @DURATION VARCHAR(10),
    @PRICE MONEY,
    @IS_ACTIVE BIT
AS
BEGIN
    UPDATE SUBSCRIPTION
    SET SUB_NAME = COALESCE(@SUB_NAME, SUB_NAME),
        DURATION = COALESCE(@DURATION, DURATION),
        PRICE = COALESCE(@PRICE, PRICE),
        IS_ACTIVE = COALESCE(@IS_ACTIVE, IS_ACTIVE)
    WHERE SUB_ID = @SUB_ID;
END;

CREATE PROCEDURE SP_GET_SUBSCRIPTIONS
AS
BEGIN
    SELECT 
        SUB_NAME, 
        DURATION, 
        PRICE, 
        IS_ACTIVE
    FROM 
        SUBSCRIPTION;
END;

------------------------------------------------------------------

ALTER TABLE PAYMENT 
ADD IS_ACTIVE BIT DEFAULT 1 NOT NULL;

CREATE PROCEDURE SP_INSERT_PAYMENT
    @PAY_METHOD VARCHAR(20)
AS
BEGIN
    INSERT INTO PAYMENT (PAY_METHOD)
    VALUES (@PAY_METHOD);
END;

CREATE PROCEDURE SP_UPDATE_PAYMENT
    @PAYMENT_ID SMALLINT,
    @PAY_METHOD VARCHAR(20),
    @IS_ACTIVE BIT
AS
BEGIN
    UPDATE PAYMENT
    SET PAY_METHOD = COALESCE(@PAY_METHOD, PAY_METHOD),
        IS_ACTIVE = COALESCE(@IS_ACTIVE, IS_ACTIVE)
    WHERE PAYMENT_ID = @PAYMENT_ID;
END;

CREATE PROCEDURE SP_GET_PAYMENTS
AS
BEGIN
    SELECT 
        PAYMENT_ID, 
        PAY_METHOD,
		IS_ACTIVE
    FROM 
        PAYMENT;
END;

----------------------------------------------------------------

CREATE PROCEDURE SP_DISPLAY_MEMBER_SUBSCRIPTION
AS
BEGIN
    SELECT 
        MEMBER.MEMBER_FULLNAME,
        MEMBER_SUBSCRIPTION.START_DATE,
        MEMBER_SUBSCRIPTION.END_DATE,
        SUBSCRIPTION.SUB_NAME AS SUBSCRIPTION,
        MEMBER_SUBSCRIPTION.IS_ACTIVE
    FROM 
        MEMBER_SUBSCRIPTION
    INNER JOIN 
        MEMBER ON MEMBER_SUBSCRIPTION.MEMBER_ID = MEMBER.MEMBER_ID
    INNER JOIN 
        SUBSCRIPTION ON MEMBER_SUBSCRIPTION.SUB_ID = SUBSCRIPTION.SUB_ID
END;

-------------------------------------------------------------------------

CREATE PROCEDURE SP_INSERTMEMBER
    @FNAME VARCHAR(50),
    @LNAME VARCHAR(30),
    @EMAIL VARCHAR(50),
    @PHONENUMBER VARCHAR(15),
    @PROGRAM_NAME VARCHAR(50),
    @SUB_ID SMALLINT,
    @USER_ID SMALLINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @PROGRAM_ID SMALLINT;
        SELECT TOP 1 @PROGRAM_ID = PROGRAM_ID
        FROM PROGRAM
        WHERE PROGRAM_NAME = @PROGRAM_NAME;

        IF @PROGRAM_ID IS NULL
        BEGIN
            RAISERROR('PROGRAM NAME DOES NOT EXIST.', 16, 1);
            RETURN;
        END

        INSERT INTO MEMBER (MEMBER_FNAME, MEMBER_LNAME, EMAIL, PHONE_NUMBER, IS_ACTIVE, PROGRAM_ID, USER_ID)
        OUTPUT INSERTED.MEMBER_ID
        VALUES (@FNAME, @LNAME, @EMAIL, @PHONENUMBER, 1, @PROGRAM_ID, @USER_ID);

        DECLARE @MEMBER_ID SMALLINT = SCOPE_IDENTITY();

        DECLARE @COACH_ID SMALLINT;
        SELECT TOP 1 @COACH_ID = COACH_ID
        FROM COACH
        WHERE SPECIALIZATION = (SELECT PROGRAM_NAME FROM PROGRAM WHERE PROGRAM_ID = @PROGRAM_ID);

        EXEC SP_INSERTMEMBER_SUBSCRIPTION @MEMBER_ID, @SUB_ID;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_UPDATE_MEMBER
    @MEMBER_ID SMALLINT,
    @FNAME VARCHAR(50) = NULL,
    @LNAME VARCHAR(30) = NULL,
    @EMAIL VARCHAR(50) = NULL,
    @PHONENUMBER VARCHAR(15) = NULL,
    @PROGRAM_NAME VARCHAR(50) = NULL,
    @SUB_ID SMALLINT = NULL,
    @USER_ID SMALLINT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        UPDATE MEMBER
        SET
            MEMBER_FNAME = COALESCE(@FNAME, MEMBER_FNAME),
            MEMBER_LNAME = COALESCE(@LNAME, MEMBER_LNAME),
            EMAIL = COALESCE(@EMAIL, EMAIL),
            PHONE_NUMBER = COALESCE(@PHONENUMBER, PHONE_NUMBER),
            PROGRAM_ID = COALESCE((SELECT PROGRAM_ID FROM PROGRAM WHERE PROGRAM_NAME = @PROGRAM_NAME), PROGRAM_ID),
            USER_ID = COALESCE(@USER_ID, USER_ID)
        WHERE MEMBER_ID = @MEMBER_ID;

        IF @PROGRAM_NAME IS NOT NULL
        BEGIN
            DECLARE @PROGRAM_ID SMALLINT;
            SELECT TOP 1 @PROGRAM_ID = PROGRAM_ID
            FROM PROGRAM
            WHERE PROGRAM_NAME = @PROGRAM_NAME;

            IF @PROGRAM_ID IS NOT NULL
            BEGIN
                UPDATE PROGRAM_COACH
                SET COACH_ID = (SELECT COACH_ID FROM COACH WHERE SPECIALIZATION = @PROGRAM_NAME)
                WHERE PROGRAM_ID = @PROGRAM_ID AND MEMBER_ID = @MEMBER_ID;
            END
        END

        IF @SUB_ID IS NOT NULL
        BEGIN
            EXEC SP_INSERTMEMBER_SUBSCRIPTION @MEMBER_ID, @SUB_ID;
        END

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_DISPLAY_MEMBER
    @MEMBER_ID SMALLINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            M.MEMBER_ID,
            M.MEMBER_FNAME,
            M.MEMBER_LNAME,
            M.MEMBER_FULLNAME,
            M.EMAIL,
            M.PHONE_NUMBER,
            M.IS_ACTIVE,
            P.PROGRAM_NAME,
            C.COACH_FULLNAME,
            S.SUB_NAME
        FROM MEMBER M
        JOIN PROGRAM P ON M.PROGRAM_ID = P.PROGRAM_ID
        JOIN PROGRAM_COACH PC ON M.PROGRAM_ID = PC.PROGRAM_ID
        JOIN COACH C ON PC.COACH_ID = C.COACH_ID
        JOIN MEMBER_SUBSCRIPTION MS ON M.MEMBER_ID = MS.MEMBER_ID
        JOIN SUBSCRIPTION S ON MS.SUB_ID = S.SUB_ID
        WHERE M.MEMBER_ID = @MEMBER_ID AND M.IS_ACTIVE = 1;

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('No active member found with the given ID.', 16, 1);
            RETURN;
        END

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;


-----------------------------------------------------------------------------

CREATE PROCEDURE SP_INSERTMEMBER_SUBSCRIPTION
    @MEMBER_ID SMALLINT,
    @SUB_ID SMALLINT
AS
BEGIN
    DECLARE @DURATION VARCHAR(10);
    SELECT @DURATION = DURATION FROM SUBSCRIPTION WHERE SUB_ID = @SUB_ID;

    DECLARE @END_DATE DATE;
    SET @END_DATE = DATEADD(
        MONTH, 
        CASE 
            WHEN @DURATION LIKE '%month%' THEN CAST(SUBSTRING(@DURATION, 1, CHARINDEX(' ', @DURATION) - 1) AS INT)
            WHEN @DURATION LIKE '%year%' THEN CAST(SUBSTRING(@DURATION, 1, CHARINDEX(' ', @DURATION) - 1) * 12 AS INT)
            ELSE 0
        END,
        GETDATE()
    );

    INSERT INTO MEMBER_SUBSCRIPTION (MEMBER_ID, SUB_ID, END_DATE)
    VALUES (@MEMBER_ID, @SUB_ID, @END_DATE);
END;

CREATE PROCEDURE SP_UPDATEMEMBER_SUBSCRIPTION
    @MEMBER_ID SMALLINT,
    @SUB_ID SMALLINT,
    @IS_ACTIVE BIT
AS
BEGIN
    UPDATE MEMBER_SUBSCRIPTION
    SET IS_ACTIVE = @IS_ACTIVE
    WHERE MEMBER_ID = @MEMBER_ID AND SUB_ID = @SUB_ID;
END;

CREATE PROCEDURE SP_ADDMEMBER_SUBSCRIPTION
    @MEMBER_ID SMALLINT,
    @SUB_ID SMALLINT,
    @START_DATE DATE,
	@END_DATE DATE
AS
BEGIN
    IF EXISTS (
        SELECT 1 FROM MEMBER_SUBSCRIPTION 
        WHERE MEMBER_ID = @MEMBER_ID 
          AND SUB_ID = @SUB_ID 
          AND IS_ACTIVE = 1
          AND (
              (@START_DATE BETWEEN START_DATE AND END_DATE) 
              OR (@END_DATE BETWEEN START_DATE AND END_DATE)
          )
    )
    BEGIN
        RAISERROR('OVERLAPPING ACTIVE SUBSCRIPTION EXISTS.', 16, 1);
        RETURN;
    END

    DECLARE @DURATION VARCHAR(10);
    SELECT @DURATION = DURATION FROM SUBSCRIPTION WHERE SUB_ID = @SUB_ID;

    SET @END_DATE = DATEADD(
        MONTH, 
        CASE 
            WHEN @DURATION LIKE '%month%' THEN CAST(SUBSTRING(@DURATION, 1, CHARINDEX(' ', @DURATION) - 1) AS INT)
            WHEN @DURATION LIKE '%year%' THEN CAST(SUBSTRING(@DURATION, 1, CHARINDEX(' ', @DURATION) - 1) * 12 AS INT)
            ELSE 0
        END,
        @START_DATE
    );

    INSERT INTO MEMBER_SUBSCRIPTION (MEMBER_ID, SUB_ID, START_DATE, END_DATE)
    VALUES (@MEMBER_ID, @SUB_ID, @START_DATE, @END_DATE);
END;


-----------------------------------------------------------------------------

---------------------------------------------------------------------

CREATE PROCEDURE SP_DISPLAY_MEMBER_DETAILS
    @MEMBER_ID SMALLINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            M.MEMBER_FNAME + ' ' + M.MEMBER_LNAME AS MEMBER_NAME,
            MS.START_DATE,
            MS.END_DATE,
            S.SUB_NAME,
            DATEDIFF(DAY, GETDATE(), MS.END_DATE) AS DAYS_UNTIL_EXPIRY
        FROM MEMBER M
        JOIN MEMBER_SUBSCRIPTION MS ON M.MEMBER_ID = MS.MEMBER_ID
        JOIN SUBSCRIPTION S ON MS.SUB_ID = S.SUB_ID
        WHERE M.MEMBER_ID = @MEMBER_ID AND M.IS_ACTIVE = 1 AND MS.IS_ACTIVE = 1;

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('No active subscription found for the given member ID.', 16, 1);
            RETURN;
        END

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

--------------------------------------------------------------------------------------

CREATE PROCEDURE SP_RECORD_PAYMENT
    @MEMBER_ID SMALLINT,
    @COACH_ID SMALLINT,
    @SUB_ID SMALLINT,
    @PAY_METHOD NVARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [TRANSACTION] (MEMBER_ID, SUB_ID, PAYMENT_ID, TRANSAC_DATE)
        SELECT 
            @MEMBER_ID,
            @SUB_ID,
            (SELECT PAYMENT_ID FROM PAYMENT WHERE PAY_METHOD = @PAY_METHOD),
            GETDATE();

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('Failed to record payment.', 16, 1);
            RETURN;
        END

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_DISPLAY_MEMBER_PAYMENT
    @MEMBER_ID SMALLINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            M.MEMBER_FNAME + ' ' + M.MEMBER_LNAME AS MEMBER_NAME,
            SB.SUB_NAME,
            T.TRANSAC_DATE,
            SB.PRICE AS AMOUNT
        FROM [TRANSACTION] T
        JOIN MEMBER M ON T.MEMBER_ID = M.MEMBER_ID
        JOIN SUBSCRIPTION SB ON T.SUB_ID = SB.SUB_ID
        JOIN PROGRAM P ON M.PROGRAM_ID = P.PROGRAM_ID
        WHERE M.MEMBER_ID = @MEMBER_ID AND M.IS_ACTIVE = 1;

        IF @@ROWCOUNT = 0
        BEGIN
            RAISERROR('No active member payment records found with the given ID.', 16, 1);
            RETURN;
        END

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

--------------------------------------------------------------------------

CREATE PROCEDURE SP_GET_PROGRAM_STATS
    @MONTH INT,
    @YEAR INT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            P.PROGRAM_NAME,
            COUNT(DISTINCT PC.COACH_ID) AS COACH_COUNT,
            COUNT(DISTINCT M.MEMBER_ID) AS MEMBER_COUNT
        FROM PROGRAM P
        LEFT JOIN PROGRAM_COACH PC ON P.PROGRAM_ID = PC.PROGRAM_ID
        LEFT JOIN MEMBER M ON P.PROGRAM_ID = M.PROGRAM_ID
        LEFT JOIN MEMBER_SUBSCRIPTION MS ON M.MEMBER_ID = MS.MEMBER_ID
        WHERE MONTH(MS.START_DATE) = @MONTH AND YEAR(MS.START_DATE) = @YEAR
        GROUP BY P.PROGRAM_NAME;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_ACTIVE_MEMBERS_COUNT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT COUNT(*) AS ActiveMembersCount
        FROM MEMBER
        WHERE IS_ACTIVE = 1;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_NEW_MEMBERS_COUNT
    @StartDate DATE
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT COUNT(*) AS NewMembersCount
        FROM MEMBER_SUBSCRIPTION MS
        JOIN MEMBER M ON MS.MEMBER_ID = M.MEMBER_ID
        WHERE M.IS_ACTIVE = 1 AND 
              (MS.START_DATE = GETDATE());

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_ALL_SUBSCRIPTIONS_SOLD
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT COUNT(*) AS SubscriptionsSold
        FROM MEMBER_SUBSCRIPTION
        WHERE IS_ACTIVE = 1;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_MEMBERS_BY_SUB_NAME
    @SUBNAME VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            M.MEMBER_FULLNAME,
            M.EMAIL,
            M.PHONE_NUMBER,
            M.IS_ACTIVE
        FROM MEMBER_SUBSCRIPTION MS
        JOIN MEMBER M ON MS.MEMBER_ID = M.MEMBER_ID
        JOIN SUBSCRIPTION S ON MS.SUB_ID = S.SUB_ID
        WHERE S.SUB_NAME = @SUBNAME
          AND MS.IS_ACTIVE = 1;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_MEMBERS_BY_PROGRAM_NAME
    @PROGRAM_NAME VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            M.MEMBER_FULLNAME,
            M.EMAIL,
            M.PHONE_NUMBER,
            M.IS_ACTIVE
        FROM MEMBER M
        JOIN PROGRAM P ON M.PROGRAM_ID = P.PROGRAM_ID
        WHERE P.PROGRAM_NAME = @PROGRAM_NAME
          AND M.IS_ACTIVE = 1;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_PROGRAM_POPULARITY
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            P.PROGRAM_NAME,
            COUNT(M.MEMBER_ID) AS MEMBER_COUNT
        FROM PROGRAM P
        LEFT JOIN MEMBER M ON P.PROGRAM_ID = M.PROGRAM_ID
        WHERE M.IS_ACTIVE = 1
        GROUP BY P.PROGRAM_NAME;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_SUBSCRIPTION_POPULARITY
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            S.SUB_NAME,
            COUNT(M.MEMBER_ID) AS MEMBER_COUNT
        FROM SUBSCRIPTION S
        LEFT JOIN MEMBER_SUBSCRIPTION MS ON S.SUB_ID = MS.SUB_ID
        LEFT JOIN MEMBER M ON MS.MEMBER_ID = M.MEMBER_ID
        WHERE M.IS_ACTIVE = 1
        GROUP BY S.SUB_NAME;

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;

CREATE PROCEDURE SP_GET_REVENUE_TRENDS_BY_MONTH_NAME
    @Year INT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            DATENAME(MONTH, T.TRANSAC_DATE) AS MonthName,
            SUM(S.PRICE) AS TotalRevenue
        FROM [TRANSACTION] T
        JOIN SUBSCRIPTION S ON T.SUB_ID = S.SUB_ID
        WHERE YEAR(T.TRANSAC_DATE) = @Year
        GROUP BY DATENAME(MONTH, T.TRANSAC_DATE);

    END TRY
    BEGIN CATCH
        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ERRORSEVERITY INT = ERROR_SEVERITY();
        DECLARE @ERRORSTATE INT = ERROR_STATE();

        RAISERROR(@ERRORMESSAGE, @ERRORSEVERITY, @ERRORSTATE);
    END CATCH
END;